# GitHub Actions CI/CD Pipeline for Vibe Tracker
# This workflow runs on pull requests and pushes to main branch
# Optimized for cost-efficiency with caching and minimal resource usage

name: CI

# Trigger on pull requests and pushes to main branch only
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single job with multiple steps to minimize resource usage
  lint-test-build:
    name: Lint, Test & Build
    runs-on: ubuntu-latest
    
    # Use specific Go version for consistency
    strategy:
      matrix:
        go-version: [1.23.6]
    
    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Setup Go with caching
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    # Cache Go build cache and module cache for faster runs
    - name: Cache Go modules and build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          ~/.cache/golangci-lint
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/.golangci.yml') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
    
    # Download dependencies
    - name: Download Go modules
      run: go mod download
    
    # Verify dependencies and check for known vulnerabilities
    - name: Verify Go modules
      run: go mod verify
    
    # Check if code is formatted with gofmt
    - name: Check Go formatting
      run: |
        UNFORMATTED=$(go fmt ./...)
        if [ -n "$UNFORMATTED" ]; then
          echo "The following files are not formatted with gofmt:"
          echo "$UNFORMATTED"
          exit 1
        fi
        echo "âœ… All Go files are properly formatted"
    
    # Run go vet for static analysis
    - name: Run go vet
      run: go vet ./...
    
    # Install and run staticcheck
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run staticcheck
      run: staticcheck ./...
    
    # Install and run golangci-lint with caching
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml
        skip-cache: false
        skip-save-cache: false
    
    # Run tests with race detection and coverage
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
    
    # Upload coverage to GitHub (optional, lightweight)
    - name: Upload coverage reports
      if: success()
      run: |
        echo "Coverage report generated: coverage.out"
        go tool cover -func=coverage.out
    
    # Build the application to ensure it compiles
    - name: Build application
      run: |
        echo "Building application..."
        go build -v -o vibe-tracker .
        echo "âœ… Application built successfully"
    
    # Optional: Check for security vulnerabilities using govulncheck
    #- name: Install govulncheck
    #  run: go install golang.org/x/vuln/cmd/govulncheck@latest
    
    #- name: Run security check
    #  run: govulncheck ./...
    
    # Clean up built artifacts (optional)
    - name: Cleanup
      if: always()
      run: |
        rm -f vibe-tracker
        rm -f coverage.out
    
    # Summary step
    - name: CI Summary
      if: success()
      run: |
        echo "ðŸŽ‰ All CI checks passed!"
        echo "âœ… Code formatting check"
        echo "âœ… Static analysis (go vet, staticcheck, golangci-lint)"
        echo "âœ… Tests with race detection"
        echo "âœ… Build verification"
        echo "âœ… Security vulnerability check"
