#!/bin/bash

# Pre-commit hook for Vibe Tracker
# Runs code formatting and basic linting checks

set -e

echo "üîç Running pre-commit checks..."

# Check if this is an initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# Get list of Go files being committed
GO_FILES=$(git diff --cached --name-only --diff-filter=ACM $against | grep '\.go$' | grep -v vendor/ || true)

if [ -n "$GO_FILES" ]; then
    echo "üìù Checking Go files: $GO_FILES"
    
    # Run go fmt on staged Go files
    echo "üé® Running go fmt..."
    UNFORMATTED=""
    for file in $GO_FILES; do
        if [ -f "$file" ]; then
            FORMATTED=$(go fmt "$file")
            if [ -n "$FORMATTED" ]; then
                UNFORMATTED="$UNFORMATTED $file"
            fi
        fi
    done
    
    if [ -n "$UNFORMATTED" ]; then
        echo "‚ùå The following files were reformatted and need to be re-staged:"
        echo "$UNFORMATTED"
        echo "Please run 'git add' on the reformatted files and commit again."
        exit 1
    fi
    echo "‚úÖ Go formatting check passed"
    
    # Run go vet on package level (not individual files)
    echo "üîé Running go vet..."
    go vet ./...
    echo "‚úÖ go vet passed"
    
    # Run staticcheck if available
    if command -v staticcheck >/dev/null 2>&1; then
        echo "üîç Running staticcheck..."
        staticcheck ./...
        echo "‚úÖ staticcheck passed"
    else
        echo "‚ö†Ô∏è  staticcheck not found, skipping..."
    fi
else
    echo "‚ÑπÔ∏è  No Go files to check"
fi

# Check for frontend files (basic checks)
FRONTEND_FILES=$(git diff --cached --name-only --diff-filter=ACM $against | grep -E '\.(js|html|css)$' || true)

if [ -n "$FRONTEND_FILES" ]; then
    echo "üåê Checking frontend files..."
    
    # Basic check for syntax errors in JS files
    for file in $FRONTEND_FILES; do
        if [[ "$file" == *.js ]] && [ -f "$file" ]; then
            # Basic syntax check using node if available
            if command -v node >/dev/null 2>&1; then
                node -c "$file" 2>/dev/null || {
                    echo "‚ùå JavaScript syntax error in $file"
                    exit 1
                }
            fi
        fi
    done
    echo "‚úÖ Frontend files check passed"
fi

# Check for common issues
echo "üîç Running additional checks..."

# Check for merge conflict markers
CONFLICT_MARKERS=$(git diff --cached --name-only | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null || true)
if [ -n "$CONFLICT_MARKERS" ]; then
    echo "‚ùå Merge conflict markers found in:"
    echo "$CONFLICT_MARKERS"
    exit 1
fi

# Check for TODO/FIXME comments being added
TODO_ADDED=$(git diff --cached | grep "^+.*\(TODO\|FIXME\|XXX\|HACK\)" || true)
if [ -n "$TODO_ADDED" ]; then
    echo "‚ö†Ô∏è  Warning: You are committing TODO/FIXME comments:"
    echo "$TODO_ADDED"
    echo "Please make sure this is intentional."
fi

echo "‚úÖ Pre-commit checks passed!"