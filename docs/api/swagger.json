{
  "schemes": ["http", "https"],
  "swagger": "2.0",
  "info": {
    "description": "A location tracking API built with Go/PocketBase backend",
    "title": "Vibe Tracker API",
    "contact": {
      "name": "API Support",
      "email": "support@vibetracker.com"
    },
    "license": {
      "name": "MIT"
    },
    "version": "1.0"
  },
  "host": "localhost:8090",
  "basePath": "/api",
  "paths": {
    "/auth/refresh": {
      "post": {
        "description": "Refresh an expired JWT token using refresh token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Refresh JWT token",
        "parameters": [
          {
            "description": "Refresh token request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.RefreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/location/{username}": {
      "get": {
        "description": "Returns the latest location data for the specified user",
        "produces": ["application/json"],
        "tags": ["Public"],
        "summary": "Get user location",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Session name filter",
            "name": "session",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of locations to return (default: 50)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ISO timestamp to filter locations since",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Location data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Authenticate user with email and password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "User login",
        "parameters": [
          {
            "description": "Login credentials",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Returns the authenticated user's profile information",
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Get current user profile",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/profile": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Updates the authenticated user's profile information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Update user profile",
        "parameters": [
          {
            "description": "Profile update data",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/profile/avatar": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Uploads a new avatar image for the authenticated user",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Upload user avatar",
        "parameters": [
          {
            "type": "file",
            "description": "Avatar image file",
            "name": "avatar",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Avatar uploaded successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid file or request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/profile/regenerate-token": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Generates a new custom token for location tracking",
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Regenerate custom token",
        "responses": {
          "200": {
            "description": "Token regenerated successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/public-location": {
      "get": {
        "description": "Returns public location data from all users in GeoJSON format",
        "produces": ["application/json"],
        "tags": ["Public"],
        "summary": "Get public locations",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of locations to return (default: 1000)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ISO timestamp to filter locations since",
            "name": "since",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Public locations retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          }
        }
      }
    },
    "/session/{username}/{session}": {
      "get": {
        "description": "Returns location data for a specific user session in GeoJSON format",
        "produces": ["application/json"],
        "tags": ["Public"],
        "summary": "Get session data",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Session name",
            "name": "session",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Session data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "404": {
            "description": "User or session not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Creates a new tracking session for the authenticated user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Sessions"],
        "summary": "Create session",
        "parameters": [
          {
            "description": "Session data",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateSessionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session created successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "409": {
            "description": "Session already exists",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/sessions/{username}": {
      "get": {
        "description": "Returns a paginated list of sessions for the specified user",
        "produces": ["application/json"],
        "tags": ["Sessions"],
        "summary": "List user sessions",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number (default: 1)",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Items per page (default: 20, max: 100)",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/sessions/{username}/{name}": {
      "get": {
        "description": "Returns a specific session by username and session name",
        "produces": ["application/json"],
        "tags": ["Sessions"],
        "summary": "Get user session",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Session name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Session retrieved successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "404": {
            "description": "Session not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Updates an existing session for the authenticated user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Sessions"],
        "summary": "Update session",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Session name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated session data",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session updated successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "404": {
            "description": "Session not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Deletes an existing session for the authenticated user",
        "produces": ["application/json"],
        "tags": ["Sessions"],
        "summary": "Delete session",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Session name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Session deleted successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "404": {
            "description": "Session not found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    },
    "/track": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          },
          {
            "TokenAuth": []
          }
        ],
        "description": "Tracks user location using GET request with query parameters",
        "produces": ["application/json"],
        "tags": ["Tracking"],
        "summary": "Track location (GET)",
        "parameters": [
          {
            "type": "number",
            "format": "float64",
            "description": "Latitude (-90 to 90)",
            "name": "lat",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "format": "float64",
            "description": "Longitude (-180 to 180)",
            "name": "lon",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "format": "float64",
            "description": "Altitude in meters",
            "name": "alt",
            "in": "query"
          },
          {
            "type": "number",
            "format": "float64",
            "description": "Speed in m/s",
            "name": "speed",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp",
            "name": "timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Session name",
            "name": "session",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Location tracked successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          },
          {
            "TokenAuth": []
          }
        ],
        "description": "Tracks user location using POST request with JSON payload",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Tracking"],
        "summary": "Track location (POST)",
        "parameters": [
          {
            "description": "Location data",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.LocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location tracked successfully",
            "schema": {
              "$ref": "#/definitions/models.SuccessResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "401": {
            "description": "Authentication required",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "models.CreateSessionRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "public": {
          "type": "boolean"
        },
        "title": {
          "type": "string",
          "maxLength": 200
        }
      }
    },
    "models.ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "details": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "models.Geometry": {
      "type": "object",
      "required": ["coordinates", "type"],
      "properties": {
        "coordinates": {
          "type": "array",
          "maxItems": 3,
          "minItems": 2,
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string",
          "enum": ["Point"]
        }
      }
    },
    "models.LocationProperties": {
      "type": "object",
      "required": ["timestamp"],
      "properties": {
        "heart_rate": {
          "type": "number",
          "maximum": 300,
          "minimum": 0
        },
        "session": {
          "type": "string",
          "maxLength": 100
        },
        "session_title": {
          "type": "string"
        },
        "speed": {
          "type": "number",
          "minimum": 0
        },
        "timestamp": {
          "type": "integer",
          "minimum": 0
        },
        "username": {
          "type": "string"
        }
      }
    },
    "models.LocationRequest": {
      "type": "object",
      "required": ["geometry", "properties", "type"],
      "properties": {
        "geometry": {
          "$ref": "#/definitions/models.Geometry"
        },
        "properties": {
          "$ref": "#/definitions/models.LocationProperties"
        },
        "type": {
          "type": "string",
          "enum": ["Feature"]
        }
      }
    },
    "models.LoginRequest": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "maxLength": 128,
          "minLength": 6
        }
      }
    },
    "models.RefreshTokenRequest": {
      "type": "object",
      "required": ["refreshToken"],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "models.SuccessResponse": {
      "type": "object",
      "properties": {
        "data": {},
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "models.UpdateProfileRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "maxLength": 128,
          "minLength": 6
        },
        "username": {
          "type": "string",
          "maxLength": 50,
          "minLength": 3
        }
      }
    },
    "models.UpdateSessionRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "public": {
          "type": "boolean"
        },
        "title": {
          "type": "string",
          "maxLength": 200
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "TokenAuth": {
      "description": "Custom token for location tracking endpoints",
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  }
}
